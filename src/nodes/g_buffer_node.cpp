#include "g_buffer_node.h"

namespace nimble
{
DEFINE_RENDER_NODE_FACTORY(GBufferNode)

	// -----------------------------------------------------------------------------------------------------------------------------------

	GBufferNode::GBufferNode(RenderGraph* graph) : SceneRenderNode(graph)
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	GBufferNode::~GBufferNode()
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	bool GBufferNode::register_resources()
	{
		return true;
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	bool GBufferNode::initialize()
	{
		return true;
	}
		
	// -----------------------------------------------------------------------------------------------------------------------------------

	void GBufferNode::shutdown()
	{

	}
	
	// -----------------------------------------------------------------------------------------------------------------------------------

	std::string GBufferNode::name()
	{
		return "G-Buffer";
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	std::string GBufferNode::vs_template_path()
	{
		return "shader/g_buffer/g_buffer_vs.glsl"; 
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	std::string GBufferNode::fs_template_path()
	{
		return "shader/g_buffer/g_buffer_vs.glsl";
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void GBufferNode::execute_internal(const View* view)
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------
} // namespace nimble