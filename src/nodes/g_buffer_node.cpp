#include "g_buffer_node.h"
#include "../renderer.h"

namespace nimble
{
DEFINE_RENDER_NODE_FACTORY(GBufferNode)

	// -----------------------------------------------------------------------------------------------------------------------------------

	GBufferNode::GBufferNode(RenderGraph* graph) : RenderNode(graph)
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	GBufferNode::~GBufferNode()
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void GBufferNode::declare_connections()
	{
		
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	bool GBufferNode::initialize(Renderer* renderer, ResourceManager* res_mgr)
	{
		m_library = renderer->shader_cache().load_library("shader/g_buffer/g_buffer_vs.glsl", "shader/g_buffer/g_buffer_vs.glsl");

		return true;
	}
		
	// -----------------------------------------------------------------------------------------------------------------------------------

	void GBufferNode::shutdown()
	{

	}
	
	// -----------------------------------------------------------------------------------------------------------------------------------

	std::string GBufferNode::name()
	{
		return "G-Buffer";
	}
	// -----------------------------------------------------------------------------------------------------------------------------------

	void GBufferNode::execute(Renderer* renderer, Scene* scene, View* view)
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------
} // namespace nimble