#include "renderer.h"
#include "camera.h"
#include "material.h"
#include "mesh.h"
#include "logger.h"
#include "utility.h"
#include "imgui.h"
#include "entity.h"
#include "global_graphics_resources.h"
#include "constants.h"
#include "profiler.h"

#include <gtc/matrix_transform.hpp>
#include <fstream>

namespace nimble
{
	// -----------------------------------------------------------------------------------------------------------------------------------

	Renderer::Renderer() {}

	// -----------------------------------------------------------------------------------------------------------------------------------

	Renderer::~Renderer() {}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::render()
	{
		queue_default_views();

		cull_scene();

		render_all_views();

		m_num_allocated_views = 0;
		m_num_active_views = 0;
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::set_scene(std::shared_ptr<Scene> scene)
	{
		m_scene = scene;
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	View* Renderer::allocate_view()
	{
		if (m_num_allocated_views == MAX_VIEWS)
		{
			NIMBLE_LOG_ERROR("Maximum number of Views reached (64)");
			return nullptr;
		}

		return &m_view_pool[m_num_allocated_views++];
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::queue_view(View* view)
	{
		if (m_num_active_views == MAX_VIEWS)
			NIMBLE_LOG_ERROR("Maximum number of Views reached (64)");
		else
			m_active_views[m_num_active_views++] = view;
	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::push_directional_light_views(View* dependent_view)
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::push_spot_light_views()
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::push_point_light_views()
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::clear_all_views()
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::cull_scene()
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::queue_default_views()
	{

	}

	// -----------------------------------------------------------------------------------------------------------------------------------

	void Renderer::render_all_views()
	{

	}
	
	// -----------------------------------------------------------------------------------------------------------------------------------
}